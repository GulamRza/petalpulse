// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  threads   Thread[] // User's created threads
  answers   Answer[] // User's answers to threads
  createdAt DateTime @default(now())
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  threads Thread[]
}

model Tag {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique // Tag name (must be unique)
  threads   ThreadTag[] // Relationship to threads
}

model Thread {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  tags ThreadTag[] // Relationship to tags

  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreadTag {
  id       String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for the relationship
  threadId String @db.ObjectId
  tagId    String @db.ObjectId
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([threadId, tagId]) // Ensure a thread cannot have duplicate tags
}

model Answer {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  threadId String @db.ObjectId
  thread   Thread @relation(fields: [threadId], references: [id])
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plant {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  type String[]
  description String?
  imgUrl String?
  overview String?
  extras String?

}